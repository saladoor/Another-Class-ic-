<UserControl x:Class="WpfApplication1.View.RectangleUserControl"
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
             mc:Ignorable="d" 
      Canvas.Left="{Binding X}" Canvas.Top="{Binding Y}" Width="{Binding Width}" Height="{Binding Height}" 
             d:DesignHeight="100" d:DesignWidth="100">

    <Grid>
        <Rectangle Fill="{Binding SelectedColor}" Stroke="Transparent" StrokeThickness="6" />
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="auto"/>
                <RowDefinition/>
                <RowDefinition Height="auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <TextBlock Grid.Row="1" Text="Choose" TextAlignment="Center" FontWeight="Bold"/>
            <TextBlock Grid.Row="3" Text="by clicking" TextAlignment="Center" FontWeight="Bold"/>
        </Grid>
        <!-- The third lowest layer in the stack is the ellipse normally seen for each Shape object, -->
        <!--  and it includes an animation, a gradient and the mouse event handlers. -->
        <!-- The opacity (tranparency) is bound to the MainViewModels ModeOpacity property, -->
        <!--  which makes this ellipse partially transparent, when a Line is being "drawn". -->
        <!-- The interesting thing about this Data Binding is that it uses RelativeSource to bind to another DataContext, -->
        <!--  than that of the ShapeUserControl. -->
        <!-- The RelativeSource finds the first parent element which is a Window, which is the MainWindow, -->
        <!--  then it uses that DataContext to bind to the MainViewModels 'ModeOpacity'. -->
        <Rectangle Opacity="{Binding DataContext.ModeOpacity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Stroke="Purple" StrokeThickness="6" StrokeDashArray="3.1">
            <!-- The fill (background) color of the ellipse is a radial (center to edge) gradient (more than one color) brush. -->
            <Rectangle.Fill>
                <RadialGradientBrush>
                    <GradientStop Color="Tomato" Offset="0.0" />
                    <GradientStop  Color="GreenYellow" Offset="0.60" />
                    <GradientStop Color="Cyan" Offset="0.90" />
                </RadialGradientBrush>
            </Rectangle.Fill>
            <!-- This specifies the point of rotation for the animation that rotates the Shape. -->
            <!-- The data binding binds to the CenterX and CenterY properties of the Shape Model object. -->
            <Rectangle.RenderTransform>
                <RotateTransform CenterX="{Binding CenterX}" CenterY="{Binding CenterY}"/>
            </Rectangle.RenderTransform>
            <!-- This specifies the animation which is triggered by the ellipse being loaded, -->
            <!--  and it specifies that the ellipse should rotate its angle 360 degress every 7 seconds, repeating forever. -->
            <Rectangle.Triggers>
                <EventTrigger RoutedEvent="Rectangle.Loaded">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" From="0" To="360" Duration="0:0:7" RepeatBehavior="Forever" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Rectangle.Triggers>
            <!-- This uses the MVVMLight package to bind mouse events to commands on the MainViewModel. -->
            <!-- More specifically it binds the three events MouseDown, MouseMove and MouseUp, -->
            <!--  to the corresponding commands (MouseDownShapeCommand, MouseMoveShapeCommand and MouseUpShapeCommand) on the MainViewModel. -->
            <!-- It also uses the Interactivity namespace from Blend (another XAML IDE for graphical designers), to make use of triggers, but you do not need to concern yourself with that. -->
            <!-- The interesting thing about this Data Binding is that it uses RelativeSource to bind to another DataContext, -->
            <!--  than that of the ShapeUserControl. -->
            <!-- The RelativeSource finds the first parent element which is a Window, which is the MainWindow, -->
            <!--  then it uses that DataContext to bind to the MainViewModels command properties, previously mentioned. -->
            <!-- You can just reuse this code to bind events to commands, which is what most .NET developers do, -->
            <!--  after finding this solution on StackOverflow.com or a similar site. -->
            <!-- Another interesting thing is that a property called 'PassEventArgsToCommand' is set to true, -->
            <!--  which makes MVVMLight pass the event parameters to the command. -->
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDown">
                    <cmd:EventToCommand Command="{Binding DataContext.MouseDownShapeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseMove">
                    <cmd:EventToCommand Command="{Binding DataContext.MouseMoveShapeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseUp">
                    <cmd:EventToCommand Command="{Binding DataContext.MouseUpShapeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Rectangle>
        <!-- The fourth lowest, and therefore the highest layer of the stack is a text that shows the Number of the Shape. -->
        <!-- The Number is put in the middle with TextAlign and VerticalAlign. -->
        <!-- An interesting thing about this layer is that it is not HitTestVisisble, -->
        <!--  which means that it passes mouse and other events on to the layers below it. -->
        <TextBlock IsHitTestVisible="False" FontSize="20" Text="{Binding Number}" TextAlignment="Center" VerticalAlignment="Center" Foreground="White"/>
    </Grid>
</UserControl>
